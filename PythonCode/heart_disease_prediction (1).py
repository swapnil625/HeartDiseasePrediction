# -*- coding: utf-8 -*-
"""Heart Disease Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VmD4Vtmh4TYDcP0KFxdmW5bYzXeI3mWP
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_recall_curve

#step 1: upload dataset
df = pd.read_csv("heart.csv.csv")
df.drop(['education'], inplace = True, axis = 1)
df.rename(columns ={'male':'Sex_male'}, inplace = True)
df.dropna(axis = 0, inplace = True)
print(df.head(), df.shape)
print(df.TenYearCHD.value_counts())

# Step 2: Manual Oversampling
class_0 = df[df['TenYearCHD'] == 0]
class_1 = df[df['TenYearCHD'] == 1]
class_1_over = class_1.sample(len(class_0), replace=True, random_state=42)
df_over = pd.concat([class_0, class_1_over], axis=0).sample(frac=1, random_state=42).reset_index(drop=True)
print("Counts of classes after oversampling:")
print(df_over['TenYearCHD'].value_counts())

# Step 3: Split data
X = df_over.drop('TenYearCHD', axis=1)
y = df_over['TenYearCHD']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Step 4: Train Random Forest
rf_model = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_model.fit(X_train, y_train)

# Step 5:  Evaluation
y_pred = rf_model.predict(X_test)
print("Initial Random Forest Evaluation (Threshold=0.5):")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))